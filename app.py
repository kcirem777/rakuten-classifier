import streamlit as st
import pandas as pd
from PIL import Image
import numpy as np
import io
import base64
import random

# Configuration de la page
st.set_page_config(
    page_title="Rakuten Product Classifier",
    page_icon="üõçÔ∏è",
    layout="wide"
)

# Les 14 cat√©gories Rakuten
CATEGORIES = {
    0: "Livre",
    1: "Musique, CD/DVD, Blu-Ray",
    2: "Jeux vid√©o, Console",
    3: "T√©l√©phonie, Tablette",
    4: "Informatique, Logiciel",
    5: "TV, Image et Son",
    6: "Maison",
    7: "√âlectrom√©nager",
    8: "Alimentation, Boisson",
    9: "Brico, Jardin, Animalerie",
    10: "Sport, Loisirs",
    11: "Mode",
    12: "Beaut√©",
    13: "Jouet, Enfant, Pu√©riculture"
}

def predict_category(image):
    """
    Fonction simul√©e pour la pr√©diction
    Remplacez cette fonction par votre mod√®le r√©el
    """
    # Simulation d'une pr√©diction
    # Ici vous int√©grerez votre mod√®le multimodal
    import random
    
    # Simuler des probabilit√©s pour chaque cat√©gorie
    probabilities = np.random.dirichlet(np.ones(14))  # 14 cat√©gories
    predicted_category = np.argmax(probabilities)
    confidence = probabilities[predicted_category]
    
    return predicted_category, confidence, probabilities

def main():
    # Titre et description
    st.title("üõçÔ∏è Rakuten Product Classifier")
    st.markdown("**Classification automatique de produits en 16 cat√©gories avec IA**")
    
    # Sidebar avec informations sur le mod√®le
    with st.sidebar:
        st.header("üìä Informations du mod√®le")
        st.metric("Pr√©cision du mod√®le", "39%")
        st.metric("√âchantillon test√©", "407 produits")
        st.metric("Cat√©gories", "14")
        
        st.markdown("---")
        st.markdown("### üè∑Ô∏è Cat√©gories disponibles")
        for i, category in CATEGORIES.items():
            st.write(f"{i}: {category}")
    
    # Interface principale
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üì∏ Upload d'image")
        uploaded_file = st.file_uploader(
            "Choisissez une image de produit",
            type=['png', 'jpg', 'jpeg'],
            help="Formats support√©s: PNG, JPG, JPEG"
        )
        
        if uploaded_file is not None:
            # Afficher l'image
            image = Image.open(uploaded_file)
            st.image(image, caption="Image upload√©e", use_column_width=True)
            
            # Bouton de pr√©diction
            if st.button("üîç Classifier le produit", type="primary"):
                with st.spinner("Classification en cours..."):
                    # Pr√©diction
                    predicted_cat, confidence, all_probs = predict_category(image)
                    
                    # Stocker les r√©sultats dans session state
                    st.session_state.prediction = {
                        'category': predicted_cat,
                        'confidence': confidence,
                        'probabilities': all_probs
                    }
    
    with col2:
        st.header("üéØ R√©sultats de classification")
        
        if 'prediction' in st.session_state:
            pred = st.session_state.prediction
            
            # R√©sultat principal
            st.success(f"**Cat√©gorie pr√©dite:** {CATEGORIES[pred['category']]}")
            st.info(f"**Confiance:** {pred['confidence']:.1%}")
            
            # Graphique des probabilit√©s
            st.subheader("üìä Distribution des probabilit√©s")
            
            # Cr√©er un DataFrame pour le graphique
            prob_df = pd.DataFrame({
                'Cat√©gorie': [CATEGORIES[i] for i in range(14)],  # 14 cat√©gories
                'Probabilit√©': pred['probabilities']
            })
            prob_df = prob_df.sort_values('Probabilit√©', ascending=False)
            
            # Graphique en barres
            st.bar_chart(prob_df.set_index('Cat√©gorie')['Probabilit√©'])
            
            # Top 3 des pr√©dictions
            st.subheader("üèÜ Top 3 des pr√©dictions")
            top_3 = prob_df.head(3)
            
            for idx, row in top_3.iterrows():
                col_a, col_b = st.columns([3, 1])
                with col_a:
                    st.write(f"**{row['Cat√©gorie']}**")
                with col_b:
                    st.write(f"{row['Probabilit√©']:.1%}")
        
        else:
            st.info("üëÜ Uploadez une image pour commencer la classification")
    
    # Section d'am√©lioration continue
    st.markdown("---")
    st.header("üí° Am√©lioration continue")
    
    col3, col4 = st.columns([1, 1])
    
    with col3:
        st.subheader("üìù Feedback")
        if 'prediction' in st.session_state:
            feedback = st.selectbox(
                "La pr√©diction est-elle correcte ?",
                ["S√©lectionnez...", "Oui, correct", "Non, incorrect"]
            )
            
            if feedback == "Non, incorrect":
                correct_category = st.selectbox(
                    "Quelle est la bonne cat√©gorie ?",
                    ["S√©lectionnez..."] + list(CATEGORIES.values())
                )
                
                if st.button("Envoyer le feedback"):
                    st.success("Merci pour votre feedback ! Il aidera √† am√©liorer le mod√®le.")
    
    with col4:
        st.subheader("üìà Statistiques")
        st.metric("Accuracy actuelle", "39%", delta="2%")
        st.metric("Feedbacks re√ßus", "127")
        st.metric("Am√©liorations", "+5% ce mois")

if __name__ == "__main__":
    main()
